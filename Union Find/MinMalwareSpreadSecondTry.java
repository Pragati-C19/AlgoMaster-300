import java.util.*;

public class MinMalwareSpreadSecondTry {
    
    // Disjoint Set Union Class

    
    // Driver Function
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        // Declare Variables 
        int n = graph.length;
        
      
        return n;
    }


    public static void main(String[] args) {
    
        MinMalwareSpreadSecondTry solution = new MinMalwareSpreadSecondTry();

        int[][] graph1 = {
            {1, 1, 0},
            {1, 1, 0},
            {0, 0, 1}
        };
        int[] initial1 = {0, 1};
        System.out.println("Result 1 -> " + solution.minMalwareSpread(graph1, initial1) + "\n");

        int[][] graph2 = {
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1}
        };
        int[] initial2 = {0, 2};
        System.out.println("Result 2 -> " + solution.minMalwareSpread(graph2, initial2) + "\n");

        int[][] graph3 = {
            {1, 1, 1},
            {1, 1, 1},
            {1, 1, 1}
        };
        int[] initial3 = {1, 2};
        System.out.println("Result 3 -> " + solution.minMalwareSpread(graph3, initial3) + "\n");

        int[][] graph4 = {
            {1, 0, 1, 0},
            {0, 1, 0, 0},
            {1, 0, 1, 0},
            {0, 0, 0, 1}
        };
        int[] initial4 = {1};
        System.out.println("Result 4 -> " + solution.minMalwareSpread(graph4, initial4) + "\n");

        int[] initial5 = {0, 1, 2};
        System.out.println("Result 5 -> " + solution.minMalwareSpread(graph1, initial5) + "\n");
    }
    
}

/*
 * Intuitions :
 
   1. Again Trying to solve 924. Minimize Malware Spread que
   2. Will use DSU logic here now

   3. Recap the que again : 
        - We have n nodes (computers), connected with each other.
        - The connection info is in a 2D matrix graph (adjacency matrix).
        - Some nodes are infected initially (initial array).
        - Malware spreads to all connected nodes (if any node in a connected group is infected, all in that group become infected).
        - We want to remove exactly one node from initial to minimize the final infected nodes.
        - If multiple choices, return the node with the smallest index.
 
    4. How DSU will help us here ?
        - DSU / Union-Find helps us group nodes into connected components easily.
 

 * Pattern :
 
    1. What are we going to do?
        - Ek connected group hota (connected component) where all nodes are connected directly or indirectly.
        - Malware spreads in entire connected group if even one node is infected.
        - So, first step: find connected components using DSU.
        - Each component has some nodes and maybe some infected nodes.
        - If a component has exactly 1 infected node, then removing that infected node from initial will save the entire component from infection.
        - Among all such nodes, choose the one which saves the largest number of nodes.
        - If tie, choose node with smallest index.

    2. Create a DSU with (0 - based indexed) bcoz our nodes are
    3. Build group with the help of union
        - it's so similar like creating a dependency graphMap I do in DFS
        - it will create a group just like we do create list in map
    4. Will count how many infected nodes are there Initially in each group
        - find parent of that initial infected node
        - increase the infected node count of that parent 
    5. Sort the initial incase we got a tie we need to return smallest node
    6. Find node to remove so that minimum nodes will get infected
        - maxSavedNodesCount : it tells aata paryant kontya node la remove kele tar saglyat jast nodes save hotay.
        - removeNode : this tells use which node we should remove at the end so that malware spread jast nodes vr nahi honar
        - now find which group that currNode belongs to 
        - ata check kr tya group madhe initial infected nodes ekach ahe ka te?
            why 1 ?
                Suppose eka group madhe 2 infected nodes ahet (e.g. node 0 and node 1).
                apan 0 remove kela still 1 mule to group again infected hoilch 
                so use nahiye tya group la save karaycha
        - to 1 node infected vala group bhetla ki apan sie check karu tya group chi kiti ahe te
        - jevha ek infected node remove karto, tevha konta group save hotoy and tya group madhe kiti nodes ahes?
                to check that currSavedNodes = dsu.size[root]
        - so jevha currSavedNodesCount > maxSavedNodesCount asel means apalyala better option bhettoy so will change 
            - maxSaved = currSaved
            - removedNode = currNode

 
    
 */